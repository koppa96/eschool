// <auto-generated />
using System;
using ESchool.ClassRegister.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ESchool.ClassRegister.Domain.Migrations
{
    [DbContext(typeof(ClassRegisterContext))]
    [Migration("20201117230800_RemoveUserId")]
    partial class RemoveUserId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeadTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HeadTeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.ClassRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ClassRooms");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Grading.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<DateTime>("WrittenIn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("KindId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Grading.GradeKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageMultiplier")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("GradeKinds");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Grading.SmallGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<DateTime>("WrittenIn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SmallGrades");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Grading.SmallGradesPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfGradesToAverage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("SmallGradesPolicies");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Messaging.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Messaging.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SchoolYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndOfFirstHalf")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AbsenceState")
                        .HasColumnType("int");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.ClassSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassSubjects");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.ClassSubjectGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassSubjectId");

                    b.HasIndex("GroupId");

                    b.ToTable("ClassSubjectGroups");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.GroupStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupStudents");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.GroupTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("GroupTeachers");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.HomeWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("HomeWorks");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Canceled")
                        .HasColumnType("bit");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("GroupId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.StudentParent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentParent");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.UserBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserBases");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserBase");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.Administrator", b =>
                {
                    b.HasBaseType("ESchool.ClassRegister.Domain.Entities.Users.UserBase");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.Parent", b =>
                {
                    b.HasBaseType("ESchool.ClassRegister.Domain.Entities.Users.UserBase");

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.Student", b =>
                {
                    b.HasBaseType("ESchool.ClassRegister.Domain.Entities.Users.UserBase");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ClassId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.Teacher", b =>
                {
                    b.HasBaseType("ESchool.ClassRegister.Domain.Entities.Users.UserBase");

                    b.Property<Guid?>("CurrentClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CurrentClassId")
                        .IsUnique()
                        .HasFilter("[CurrentClassId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Class", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Teacher", "HeadTeacher")
                        .WithMany("PreviousClasses")
                        .HasForeignKey("HeadTeacherId");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Grading.Grade", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.ClassSubject", "ClassSubject")
                        .WithMany()
                        .HasForeignKey("ClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Grading.GradeKind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId");

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Grading.SmallGrade", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.ClassSubject", "ClassSubject")
                        .WithMany()
                        .HasForeignKey("ClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Student", "Student")
                        .WithMany("SmallGrades")
                        .HasForeignKey("StudentId");

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Grading.SmallGradesPolicy", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Group", "Group")
                        .WithOne("SmallGradesPolicy")
                        .HasForeignKey("ESchool.ClassRegister.Domain.Entities.Grading.SmallGradesPolicy", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Messaging.Message", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.UserBase", "SenderUser")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderUserId");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Messaging.UserMessage", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Messaging.Message", "Message")
                        .WithMany("ReceiverUserMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.UserBase", "User")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Absence", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Lesson", "Lesson")
                        .WithMany("Absences")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.ClassSubject", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.ClassSubjectGroup", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.ClassSubject", "ClassSubject")
                        .WithMany("ClassSubjectGroups")
                        .HasForeignKey("ClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Group", "Group")
                        .WithMany("ClassSubjectGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.GroupStudent", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Student", "Student")
                        .WithMany("GroupStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.GroupTeacher", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Group", "Group")
                        .WithMany("GroupTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany("GroupTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.HomeWork", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Lesson", "Lesson")
                        .WithMany("HomeWorks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Lesson", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.ClassRoom", "ClassRoom")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.SubjectManagement.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.StudentParent", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Parent", "Parent")
                        .WithMany("StudentParents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Users.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.Student", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESchool.ClassRegister.Domain.Entities.Users.Teacher", b =>
                {
                    b.HasOne("ESchool.ClassRegister.Domain.Entities.Class", "CurrentClass")
                        .WithOne()
                        .HasForeignKey("ESchool.ClassRegister.Domain.Entities.Users.Teacher", "CurrentClassId");
                });
#pragma warning restore 612, 618
        }
    }
}
