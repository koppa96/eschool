// <auto-generated />
using System;
using ESchool.Testing.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ESchool.Testing.Domain.Migrations
{
    [DbContext(typeof(TestingContext))]
    [Migration("20211010155526_ClassRegisterEntities")]
    partial class ClassRegisterEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ESchool.Libs.Outbox.EntityFrameworkCore.Entities.OutboxEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<int>("Retries")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("State");

                    b.ToTable("OutboxEntries");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.TaskAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GivenPoints")
                        .HasColumnType("integer");

                    b.Property<bool>("HasBeenCorrected")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TestAnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TestTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestAnswerId");

                    b.ToTable("TaskAnswers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TaskAnswer");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ClassSchoolYearSubjects");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubjectStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSchoolYearSubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassSchoolYearSubjectId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassSchoolYearSubjectStudents");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubjectTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSchoolYearSubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassSchoolYearSubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassSchoolYearSubjectTeachers");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.StudentTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TestAnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestAnswerId");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.ToTable("StudentTest");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTaskOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestTaskId");

                    b.ToTable("MultipleChoiceTestTaskOption");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.TestTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IncorrectAnswerPointValue")
                        .HasColumnType("integer");

                    b.Property<int>("PointValue")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Tasks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassSchoolYearSubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ScheduledLength")
                        .HasColumnType("interval");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassSchoolYearSubjectId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.TestAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("ClosedByTeacher")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("TestAnswers");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.TestingUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.TestingUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TestingUserRole");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.FreeText.FreeTextTaskAnswer", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Answers.TaskAnswer");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.HasIndex("TestTaskId");

                    b.HasDiscriminator().HasValue("FreeTextTaskAnswer");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.MultipleChoice.MultipleChoiceTaskAnswer", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Answers.TaskAnswer");

                    b.Property<Guid?>("SelectedOptionId")
                        .HasColumnType("uuid");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("TestTaskId");

                    b.HasDiscriminator().HasValue("MultipleChoiceTaskAnswer");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.TrueOrFalse.TrueOrFalseTaskAnswer", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Answers.TaskAnswer");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("boolean");

                    b.HasIndex("TestTaskId");

                    b.HasDiscriminator().HasValue("TrueOrFalseTaskAnswer");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.FreeText.FreeTextTestTask", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Tasks.TestTask");

                    b.HasDiscriminator().HasValue("FreeTextTestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTask", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Tasks.TestTask");

                    b.Property<Guid?>("CorrectOptionId")
                        .HasColumnType("uuid");

                    b.HasIndex("CorrectOptionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("MultipleChoiceTestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.TrueOrFalse.TrueOrFalseTestTask", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Tasks.TestTask");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("TrueOrFalseTestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.Student", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Users.TestingUserRole");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.Teacher", b =>
                {
                    b.HasBaseType("ESchool.Testing.Domain.Entities.Users.TestingUserRole");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.TaskAnswer", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.TestAnswer", "TestAnswer")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("TestAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestAnswer");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubject", b =>
                {
                    b.OwnsOne("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassRegisterEntity", "Class", b1 =>
                        {
                            b1.Property<Guid>("ClassSchoolYearSubjectId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("ClassSchoolYearSubjectId");

                            b1.ToTable("ClassSchoolYearSubjects");

                            b1.WithOwner()
                                .HasForeignKey("ClassSchoolYearSubjectId");
                        });

                    b.OwnsOne("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassRegisterEntity", "SchoolYear", b1 =>
                        {
                            b1.Property<Guid>("ClassSchoolYearSubjectId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("ClassSchoolYearSubjectId");

                            b1.ToTable("ClassSchoolYearSubjects");

                            b1.WithOwner()
                                .HasForeignKey("ClassSchoolYearSubjectId");
                        });

                    b.OwnsOne("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassRegisterEntity", "Subject", b1 =>
                        {
                            b1.Property<Guid>("ClassSchoolYearSubjectId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("ClassSchoolYearSubjectId");

                            b1.ToTable("ClassSchoolYearSubjects");

                            b1.WithOwner()
                                .HasForeignKey("ClassSchoolYearSubjectId");
                        });

                    b.Navigation("Class");

                    b.Navigation("SchoolYear");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubjectStudent", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubject", "ClassSchoolYearSubject")
                        .WithMany("ClassSchoolYearSubjectStudents")
                        .HasForeignKey("ClassSchoolYearSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.Testing.Domain.Entities.Users.Student", "Student")
                        .WithMany("ClassSchoolYearSubjectStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchoolYearSubject");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubjectTeacher", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubject", "ClassSchoolYearSubject")
                        .WithMany("ClassSchoolYearSubjectTeachers")
                        .HasForeignKey("ClassSchoolYearSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.Testing.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany("GroupTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchoolYearSubject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.StudentTest", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Users.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.Testing.Domain.Entities.TestAnswer", "TestAnswer")
                        .WithMany()
                        .HasForeignKey("TestAnswerId");

                    b.HasOne("ESchool.Testing.Domain.Entities.Test", "Test")
                        .WithMany("StudentTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESchool.Testing.Domain.Entities.TestAnswer", null)
                        .WithOne("StudentTest")
                        .HasForeignKey("ESchool.Testing.Domain.Entities.StudentTest", "TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");

                    b.Navigation("TestAnswer");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTaskOption", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTask", "TestTask")
                        .WithMany("Options")
                        .HasForeignKey("TestTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.TestTask", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Test", "Test")
                        .WithMany("Tasks")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Test", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubject", "ClassSchoolYearSubject")
                        .WithMany("Tests")
                        .HasForeignKey("ClassSchoolYearSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchoolYearSubject");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.TestAnswer", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Users.Student", null)
                        .WithMany("TestAnswers")
                        .HasForeignKey("StudentId");

                    b.HasOne("ESchool.Testing.Domain.Entities.Test", null)
                        .WithMany("Answers")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.TestingUserRole", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Users.TestingUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.FreeText.FreeTextTaskAnswer", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Tasks.FreeText.FreeTextTestTask", "TestTask")
                        .WithMany()
                        .HasForeignKey("TestTaskId");

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.MultipleChoice.MultipleChoiceTaskAnswer", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTaskOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId");

                    b.HasOne("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTask", "TestTask")
                        .WithMany()
                        .HasForeignKey("TestTaskId");

                    b.Navigation("SelectedOption");

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Answers.TrueOrFalse.TrueOrFalseTaskAnswer", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Tasks.TrueOrFalse.TrueOrFalseTestTask", "TestTask")
                        .WithMany()
                        .HasForeignKey("TestTaskId");

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTask", b =>
                {
                    b.HasOne("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTaskOption", "CorrectOption")
                        .WithOne()
                        .HasForeignKey("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTask", "CorrectOptionId");

                    b.Navigation("CorrectOption");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.ClassRegisterData.ClassSchoolYearSubject", b =>
                {
                    b.Navigation("ClassSchoolYearSubjectStudents");

                    b.Navigation("ClassSchoolYearSubjectTeachers");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Test", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("StudentTests");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.TestAnswer", b =>
                {
                    b.Navigation("StudentTest");

                    b.Navigation("TaskAnswers");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.TestingUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Tasks.MultipleChoice.MultipleChoiceTestTask", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.Student", b =>
                {
                    b.Navigation("ClassSchoolYearSubjectStudents");

                    b.Navigation("TestAnswers");
                });

            modelBuilder.Entity("ESchool.Testing.Domain.Entities.Users.Teacher", b =>
                {
                    b.Navigation("GroupTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
