/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class AbsencesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    setAbsenceState(absenceId: string, command: AbsenceStateSetCommand , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/absences/{absenceId}";
        if (absenceId === undefined || absenceId === null)
            throw new Error("The parameter 'absenceId' must be defined.");
        url_ = url_.replace("{absenceId}", encodeURIComponent("" + absenceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetAbsenceState(_response);
        });
    }

    protected processSetAbsenceState(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteAbsence(absenceId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/absences/{absenceId}";
        if (absenceId === undefined || absenceId === null)
            throw new Error("The parameter 'absenceId' must be defined.");
        url_ = url_.replace("{absenceId}", encodeURIComponent("" + absenceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAbsence(_response);
        });
    }

    protected processDeleteAbsence(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    setAbsenceState2(absenceId: string, schoolYearId: string, classId: string, subjectId: string, lessonId: string, command: AbsenceStateSetCommand , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/lessons/{lessonId}/absences/{absenceId}";
        if (absenceId === undefined || absenceId === null)
            throw new Error("The parameter 'absenceId' must be defined.");
        url_ = url_.replace("{absenceId}", encodeURIComponent("" + absenceId));
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetAbsenceState2(_response);
        });
    }

    protected processSetAbsenceState2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteAbsence2(absenceId: string, schoolYearId: string, classId: string, subjectId: string, lessonId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/lessons/{lessonId}/absences/{absenceId}";
        if (absenceId === undefined || absenceId === null)
            throw new Error("The parameter 'absenceId' must be defined.");
        url_ = url_.replace("{absenceId}", encodeURIComponent("" + absenceId));
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAbsence2(_response);
        });
    }

    protected processDeleteAbsence2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ClassesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listClasses(includeFinishedClasses: boolean | undefined, pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfClassListResponse> {
        let url_ = this.baseUrl + "/api/classes?";
        if (includeFinishedClasses === null)
            throw new Error("The parameter 'includeFinishedClasses' cannot be null.");
        else if (includeFinishedClasses !== undefined)
            url_ += "IncludeFinishedClasses=" + encodeURIComponent("" + includeFinishedClasses) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListClasses(_response);
        });
    }

    protected processListClasses(response: AxiosResponse): Promise<PagedListResponseOfClassListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfClassListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfClassListResponse>(<any>null);
    }

    createClass(command: ClassCreateCommand , cancelToken?: CancelToken | undefined): Promise<ClassDetailsResponse> {
        let url_ = this.baseUrl + "/api/classes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateClass(_response);
        });
    }

    protected processCreateClass(response: AxiosResponse): Promise<ClassDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassDetailsResponse>(<any>null);
    }

    getClass(id: string , cancelToken?: CancelToken | undefined): Promise<ClassDetailsResponse> {
        let url_ = this.baseUrl + "/api/classes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClass(_response);
        });
    }

    protected processGetClass(response: AxiosResponse): Promise<ClassDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassDetailsResponse>(<any>null);
    }

    editClass(id: string, command: ClassEditCommand , cancelToken?: CancelToken | undefined): Promise<ClassDetailsResponse> {
        let url_ = this.baseUrl + "/api/classes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditClass(_response);
        });
    }

    protected processEditClass(response: AxiosResponse): Promise<ClassDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassDetailsResponse>(<any>null);
    }

    deleteClass(id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/classes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteClass(_response);
        });
    }

    protected processDeleteClass(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    assignStudent(classId: string, studentId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/classes/{classId}/students/{studentId}";
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (studentId === undefined || studentId === null)
            throw new Error("The parameter 'studentId' must be defined.");
        url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssignStudent(_response);
        });
    }

    protected processAssignStudent(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    removeStudent(classId: string, studentId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/classes/{classId}/students/{studentId}";
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (studentId === undefined || studentId === null)
            throw new Error("The parameter 'studentId' must be defined.");
        url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemoveStudent(_response);
        });
    }

    protected processRemoveStudent(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ClassroomsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listClassrooms(pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfClassroomListResponse> {
        let url_ = this.baseUrl + "/api/classrooms?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListClassrooms(_response);
        });
    }

    protected processListClassrooms(response: AxiosResponse): Promise<PagedListResponseOfClassroomListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfClassroomListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfClassroomListResponse>(<any>null);
    }

    createClassroom(command: ClassroomCreateCommand , cancelToken?: CancelToken | undefined): Promise<ClassroomDetailsResponse> {
        let url_ = this.baseUrl + "/api/classrooms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateClassroom(_response);
        });
    }

    protected processCreateClassroom(response: AxiosResponse): Promise<ClassroomDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassroomDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassroomDetailsResponse>(<any>null);
    }

    getClassroom(id: string , cancelToken?: CancelToken | undefined): Promise<ClassroomDetailsResponse> {
        let url_ = this.baseUrl + "/api/classrooms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClassroom(_response);
        });
    }

    protected processGetClassroom(response: AxiosResponse): Promise<ClassroomDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassroomDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassroomDetailsResponse>(<any>null);
    }

    editClassroom(id: string, command: ClassroomEditCommand , cancelToken?: CancelToken | undefined): Promise<ClassroomDetailsResponse> {
        let url_ = this.baseUrl + "/api/classrooms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditClassroom(_response);
        });
    }

    protected processEditClassroom(response: AxiosResponse): Promise<ClassroomDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassroomDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassroomDetailsResponse>(<any>null);
    }

    deleteClassroom(id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/classrooms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteClassroom(_response);
        });
    }

    protected processDeleteClassroom(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ClassSchoolYearsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    addClassToSchoolYear(schoolYearId: string, classId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddClassToSchoolYear(_response);
        });
    }

    protected processAddClassToSchoolYear(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    removeClassFromSchoolYear(schoolYearId: string, classId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemoveClassFromSchoolYear(_response);
        });
    }

    protected processRemoveClassFromSchoolYear(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ClassTypesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listClassTypes(pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfClassTypeListResponse> {
        let url_ = this.baseUrl + "/api/class-types?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListClassTypes(_response);
        });
    }

    protected processListClassTypes(response: AxiosResponse): Promise<PagedListResponseOfClassTypeListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfClassTypeListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfClassTypeListResponse>(<any>null);
    }

    createClassType(command: ClassTypeCreateCommand , cancelToken?: CancelToken | undefined): Promise<ClassTypeDetailsResponse> {
        let url_ = this.baseUrl + "/api/class-types";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateClassType(_response);
        });
    }

    protected processCreateClassType(response: AxiosResponse): Promise<ClassTypeDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassTypeDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassTypeDetailsResponse>(<any>null);
    }

    getClassType(id: string , cancelToken?: CancelToken | undefined): Promise<ClassTypeDetailsResponse> {
        let url_ = this.baseUrl + "/api/class-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClassType(_response);
        });
    }

    protected processGetClassType(response: AxiosResponse): Promise<ClassTypeDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassTypeDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassTypeDetailsResponse>(<any>null);
    }

    editClassType(id: string, command: ClassTypeEditCommand , cancelToken?: CancelToken | undefined): Promise<ClassTypeDetailsResponse> {
        let url_ = this.baseUrl + "/api/class-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditClassType(_response);
        });
    }

    protected processEditClassType(response: AxiosResponse): Promise<ClassTypeDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ClassTypeDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClassTypeDetailsResponse>(<any>null);
    }

    deleteClassType(id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/class-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteClassType(_response);
        });
    }

    protected processDeleteClassType(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class GradeKindsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listGradeKinds(  cancelToken?: CancelToken | undefined): Promise<GradeKindResponse[]> {
        let url_ = this.baseUrl + "/api/grade-kinds";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListGradeKinds(_response);
        });
    }

    protected processListGradeKinds(response: AxiosResponse): Promise<GradeKindResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GradeKindResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GradeKindResponse[]>(<any>null);
    }

    createGradeKind(command: GradeKindCreateCommand , cancelToken?: CancelToken | undefined): Promise<GradeKindResponse> {
        let url_ = this.baseUrl + "/api/grade-kinds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateGradeKind(_response);
        });
    }

    protected processCreateGradeKind(response: AxiosResponse): Promise<GradeKindResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GradeKindResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GradeKindResponse>(<any>null);
    }

    editGradeKind(gradeKindId: string, command: GradeKindEditCommand , cancelToken?: CancelToken | undefined): Promise<GradeKindResponse> {
        let url_ = this.baseUrl + "/api/grade-kinds/{gradeKindId}";
        if (gradeKindId === undefined || gradeKindId === null)
            throw new Error("The parameter 'gradeKindId' must be defined.");
        url_ = url_.replace("{gradeKindId}", encodeURIComponent("" + gradeKindId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditGradeKind(_response);
        });
    }

    protected processEditGradeKind(response: AxiosResponse): Promise<GradeKindResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GradeKindResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GradeKindResponse>(<any>null);
    }

    deleteGradeKind(gradeKindId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/grade-kinds/{gradeKindId}";
        if (gradeKindId === undefined || gradeKindId === null)
            throw new Error("The parameter 'gradeKindId' must be defined.");
        url_ = url_.replace("{gradeKindId}", encodeURIComponent("" + gradeKindId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteGradeKind(_response);
        });
    }

    protected processDeleteGradeKind(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class MessagesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listIncomingMessages(pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfMessageListResponse> {
        let url_ = this.baseUrl + "/api/messages/incoming?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListIncomingMessages(_response);
        });
    }

    protected processListIncomingMessages(response: AxiosResponse): Promise<PagedListResponseOfMessageListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfMessageListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfMessageListResponse>(<any>null);
    }

    listSentMessages(pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfMessageListResponse> {
        let url_ = this.baseUrl + "/api/messages/sent?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListSentMessages(_response);
        });
    }

    protected processListSentMessages(response: AxiosResponse): Promise<PagedListResponseOfMessageListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfMessageListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfMessageListResponse>(<any>null);
    }

    sendMessage(command: MessageSendCommand , cancelToken?: CancelToken | undefined): Promise<MessageDetailsResponse> {
        let url_ = this.baseUrl + "/api/messages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendMessage(_response);
        });
    }

    protected processSendMessage(response: AxiosResponse): Promise<MessageDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MessageDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageDetailsResponse>(<any>null);
    }

    getMessage(messageId: string , cancelToken?: CancelToken | undefined): Promise<MessageDetailsResponse> {
        let url_ = this.baseUrl + "/api/messages/{messageId}";
        if (messageId === undefined || messageId === null)
            throw new Error("The parameter 'messageId' must be defined.");
        url_ = url_.replace("{messageId}", encodeURIComponent("" + messageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMessage(_response);
        });
    }

    protected processGetMessage(response: AxiosResponse): Promise<MessageDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MessageDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageDetailsResponse>(<any>null);
    }
}

export class SchoolYearsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listSchoolYears(pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfSchoolYearListResponse> {
        let url_ = this.baseUrl + "/api/school-years?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListSchoolYears(_response);
        });
    }

    protected processListSchoolYears(response: AxiosResponse): Promise<PagedListResponseOfSchoolYearListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfSchoolYearListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfSchoolYearListResponse>(<any>null);
    }

    createSchoolYear(command: SchoolYearCreateCommand , cancelToken?: CancelToken | undefined): Promise<SchoolYearDetailsResponse> {
        let url_ = this.baseUrl + "/api/school-years";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateSchoolYear(_response);
        });
    }

    protected processCreateSchoolYear(response: AxiosResponse): Promise<SchoolYearDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SchoolYearDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SchoolYearDetailsResponse>(<any>null);
    }

    getSchoolYear(id: string , cancelToken?: CancelToken | undefined): Promise<SchoolYearDetailsResponse> {
        let url_ = this.baseUrl + "/api/school-years/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSchoolYear(_response);
        });
    }

    protected processGetSchoolYear(response: AxiosResponse): Promise<SchoolYearDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SchoolYearDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SchoolYearDetailsResponse>(<any>null);
    }

    editSchoolYear(id: string, command: SchoolYearEditCommand , cancelToken?: CancelToken | undefined): Promise<SchoolYearDetailsResponse> {
        let url_ = this.baseUrl + "/api/school-years/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditSchoolYear(_response);
        });
    }

    protected processEditSchoolYear(response: AxiosResponse): Promise<SchoolYearDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SchoolYearDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SchoolYearDetailsResponse>(<any>null);
    }

    deleteSchoolYear(id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteSchoolYear(_response);
        });
    }

    protected processDeleteSchoolYear(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class StudentsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listUnassignedStudents(searchText: string | null | undefined, pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfUserRoleListResponse> {
        let url_ = this.baseUrl + "/api/students/unassigned?";
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListUnassignedStudents(_response);
        });
    }

    protected processListUnassignedStudents(response: AxiosResponse): Promise<PagedListResponseOfUserRoleListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfUserRoleListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfUserRoleListResponse>(<any>null);
    }

    listAbsences(studentId: string, schoolYearId: string | undefined, pageIndex: number | undefined, pageSize: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfAbsenceListResponse> {
        let url_ = this.baseUrl + "/api/students/{studentId}/absences?";
        if (studentId === undefined || studentId === null)
            throw new Error("The parameter 'studentId' must be defined.");
        url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
        if (schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' cannot be null.");
        else if (schoolYearId !== undefined)
            url_ += "schoolYearId=" + encodeURIComponent("" + schoolYearId) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListAbsences(_response);
        });
    }

    protected processListAbsences(response: AxiosResponse): Promise<PagedListResponseOfAbsenceListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfAbsenceListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfAbsenceListResponse>(<any>null);
    }

    listGrades(studentId: string, schoolYearId: string | undefined , cancelToken?: CancelToken | undefined): Promise<GradeListByStudentResponse[]> {
        let url_ = this.baseUrl + "/api/students/{studentId}/grades?";
        if (studentId === undefined || studentId === null)
            throw new Error("The parameter 'studentId' must be defined.");
        url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
        if (schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' cannot be null.");
        else if (schoolYearId !== undefined)
            url_ += "schoolYearId=" + encodeURIComponent("" + schoolYearId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListGrades(_response);
        });
    }

    protected processListGrades(response: AxiosResponse): Promise<GradeListByStudentResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GradeListByStudentResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GradeListByStudentResponse[]>(<any>null);
    }
}

export class SubjectsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listSubjects(pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfSubjectListResponse> {
        let url_ = this.baseUrl + "/api/subjects?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListSubjects(_response);
        });
    }

    protected processListSubjects(response: AxiosResponse): Promise<PagedListResponseOfSubjectListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfSubjectListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfSubjectListResponse>(<any>null);
    }

    createSubject(command: SubjectCreateCommand , cancelToken?: CancelToken | undefined): Promise<SubjectDetailsResponse> {
        let url_ = this.baseUrl + "/api/subjects";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateSubject(_response);
        });
    }

    protected processCreateSubject(response: AxiosResponse): Promise<SubjectDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SubjectDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SubjectDetailsResponse>(<any>null);
    }

    getSubject(subjectId: string , cancelToken?: CancelToken | undefined): Promise<SubjectDetailsResponse> {
        let url_ = this.baseUrl + "/api/subjects/{subjectId}";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSubject(_response);
        });
    }

    protected processGetSubject(response: AxiosResponse): Promise<SubjectDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SubjectDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SubjectDetailsResponse>(<any>null);
    }

    editSubject(subjectId: string, command: SubjectEditCommand , cancelToken?: CancelToken | undefined): Promise<SubjectDetailsResponse> {
        let url_ = this.baseUrl + "/api/subjects/{subjectId}";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditSubject(_response);
        });
    }

    protected processEditSubject(response: AxiosResponse): Promise<SubjectDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SubjectDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SubjectDetailsResponse>(<any>null);
    }

    assignTeacherToSubject(subjectId: string, teacherId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/subjects/{subjectId}/teachers/{teacherId}";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (teacherId === undefined || teacherId === null)
            throw new Error("The parameter 'teacherId' must be defined.");
        url_ = url_.replace("{teacherId}", encodeURIComponent("" + teacherId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssignTeacherToSubject(_response);
        });
    }

    protected processAssignTeacherToSubject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    unassignTeacherFromSubject(subjectId: string, teacherId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/subjects/{subjectId}/teachers/{teacherId}";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (teacherId === undefined || teacherId === null)
            throw new Error("The parameter 'teacherId' must be defined.");
        url_ = url_.replace("{teacherId}", encodeURIComponent("" + teacherId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUnassignTeacherFromSubject(_response);
        });
    }

    protected processUnassignTeacherFromSubject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteSubject(id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/subjects/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteSubject(_response);
        });
    }

    protected processDeleteSubject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class TeachersClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listTeachers(searchText: string | null | undefined, pageSize: number | undefined, pageIndex: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfUserRoleListResponse> {
        let url_ = this.baseUrl + "/api/teachers?";
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListTeachers(_response);
        });
    }

    protected processListTeachers(response: AxiosResponse): Promise<PagedListResponseOfUserRoleListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfUserRoleListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfUserRoleListResponse>(<any>null);
    }
}

export class ClassSchoolYearLessonsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLessonsBetween(schoolYearId: string, classId: string, from: Date | undefined, to: Date | undefined, showCanceled: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<LessonListResponse[]> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/lessons?";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (from === null)
            throw new Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "from=" + encodeURIComponent(from ? "" + from.toJSON() : "") + "&";
        if (to === null)
            throw new Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "to=" + encodeURIComponent(to ? "" + to.toJSON() : "") + "&";
        if (showCanceled === null)
            throw new Error("The parameter 'showCanceled' cannot be null.");
        else if (showCanceled !== undefined)
            url_ += "showCanceled=" + encodeURIComponent("" + showCanceled) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLessonsBetween(_response);
        });
    }

    protected processGetLessonsBetween(response: AxiosResponse): Promise<LessonListResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LessonListResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LessonListResponse[]>(<any>null);
    }
}

export class ClassSchoolYearSubjectGradesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listGradesBySubject(schoolYearId: string, classId: string, subjectId: string , cancelToken?: CancelToken | undefined): Promise<GradeListByClassSchoolYearSubjectResponse[]> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/grades";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListGradesBySubject(_response);
        });
    }

    protected processListGradesBySubject(response: AxiosResponse): Promise<GradeListByClassSchoolYearSubjectResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GradeListByClassSchoolYearSubjectResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GradeListByClassSchoolYearSubjectResponse[]>(<any>null);
    }
}

export class ClassSchoolYearSubjectLessonsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createLesson(schoolYearId: string, classId: string, subjectId: string, body: LessonCreateCommandBody , cancelToken?: CancelToken | undefined): Promise<LessonDetailsResponse> {
        let url_ = this.baseUrl + "/api/lessons";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateLesson(_response);
        });
    }

    protected processCreateLesson(response: AxiosResponse): Promise<LessonDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LessonDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LessonDetailsResponse>(<any>null);
    }

    createLesson2(schoolYearId: string, classId: string, subjectId: string, body: LessonCreateCommandBody , cancelToken?: CancelToken | undefined): Promise<LessonDetailsResponse> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/lessons";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateLesson2(_response);
        });
    }

    protected processCreateLesson2(response: AxiosResponse): Promise<LessonDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LessonDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LessonDetailsResponse>(<any>null);
    }

    createAbsence(lessonId: string, studentId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/lessons/{lessonId}/absences/{studentId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        if (studentId === undefined || studentId === null)
            throw new Error("The parameter 'studentId' must be defined.");
        url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateAbsence(_response);
        });
    }

    protected processCreateAbsence(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    createAbsence2(lessonId: string, studentId: string, schoolYearId: string, classId: string, subjectId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/lessons/{lessonId}/absences/{studentId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        if (studentId === undefined || studentId === null)
            throw new Error("The parameter 'studentId' must be defined.");
        url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateAbsence2(_response);
        });
    }

    protected processCreateAbsence2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    editLesson(lessonId: string, command: LessonEditCommand , cancelToken?: CancelToken | undefined): Promise<LessonDetailsResponse> {
        let url_ = this.baseUrl + "/api/lessons/{lessonId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditLesson(_response);
        });
    }

    protected processEditLesson(response: AxiosResponse): Promise<LessonDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LessonDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LessonDetailsResponse>(<any>null);
    }

    setLessonCancellation(lessonId: string, command: LessonCancellationSetCommand , cancelToken?: CancelToken | undefined): Promise<LessonDetailsResponse> {
        let url_ = this.baseUrl + "/api/lessons/{lessonId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetLessonCancellation(_response);
        });
    }

    protected processSetLessonCancellation(response: AxiosResponse): Promise<LessonDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LessonDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LessonDetailsResponse>(<any>null);
    }

    deleteLesson(lessonId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/lessons/{lessonId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteLesson(_response);
        });
    }

    protected processDeleteLesson(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    editLesson2(lessonId: string, schoolYearId: string, classId: string, subjectId: string, command: LessonEditCommand , cancelToken?: CancelToken | undefined): Promise<LessonDetailsResponse> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/lessons/{lessonId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditLesson2(_response);
        });
    }

    protected processEditLesson2(response: AxiosResponse): Promise<LessonDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LessonDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LessonDetailsResponse>(<any>null);
    }

    setLessonCancellation2(lessonId: string, schoolYearId: string, classId: string, subjectId: string, command: LessonCancellationSetCommand , cancelToken?: CancelToken | undefined): Promise<LessonDetailsResponse> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/lessons/{lessonId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = command;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetLessonCancellation2(_response);
        });
    }

    protected processSetLessonCancellation2(response: AxiosResponse): Promise<LessonDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LessonDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LessonDetailsResponse>(<any>null);
    }

    deleteLesson2(lessonId: string, schoolYearId: string, classId: string, subjectId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/lessons/{lessonId}";
        if (lessonId === undefined || lessonId === null)
            throw new Error("The parameter 'lessonId' must be defined.");
        url_ = url_.replace("{lessonId}", encodeURIComponent("" + lessonId));
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteLesson2(_response);
        });
    }

    protected processDeleteLesson2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ClassSchoolYearSubjectsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listClassSchoolYearSubjects(schoolYearId: string, classId: string, subjectId: string | undefined, pageIndex: number | undefined, pageSize: number | undefined , cancelToken?: CancelToken | undefined): Promise<PagedListResponseOfSubjectListResponse> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects?";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === null)
            throw new Error("The parameter 'subjectId' cannot be null.");
        else if (subjectId !== undefined)
            url_ += "subjectId=" + encodeURIComponent("" + subjectId) + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListClassSchoolYearSubjects(_response);
        });
    }

    protected processListClassSchoolYearSubjects(response: AxiosResponse): Promise<PagedListResponseOfSubjectListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedListResponseOfSubjectListResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedListResponseOfSubjectListResponse>(<any>null);
    }

    createClassSchoolYearSubject(schoolYearId: string, classId: string, subjectId: string, teacherIds: string[] , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = teacherIds;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateClassSchoolYearSubject(_response);
        });
    }

    protected processCreateClassSchoolYearSubject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    editClassSchoolYearSubject(schoolYearId: string, classId: string, subjectId: string, teacherIds: string[] , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = teacherIds;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditClassSchoolYearSubject(_response);
        });
    }

    protected processEditClassSchoolYearSubject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    deleteClassSchoolYearSubject(schoolYearId: string, classId: string, subjectId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteClassSchoolYearSubject(_response);
        });
    }

    protected processDeleteClassSchoolYearSubject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ClassSchoolYearSubjectStudentGradesClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createGrade(schoolYearId: string, classId: string, subjectId: string, studentId: string, dto: ClassSchoolYearSubjectGradeCreateDto , cancelToken?: CancelToken | undefined): Promise<GradeDetailsResponse> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/students/{studentId}/grades";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (studentId === undefined || studentId === null)
            throw new Error("The parameter 'studentId' must be defined.");
        url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = dto;

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateGrade(_response);
        });
    }

    protected processCreateGrade(response: AxiosResponse): Promise<GradeDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GradeDetailsResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GradeDetailsResponse>(<any>null);
    }
}

export class ClassSchoolYearSubjectTeachersClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    assignTeacher(schoolYearId: string, classId: string, subjectId: string, teacherId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/teachers/{teacherId}";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (teacherId === undefined || teacherId === null)
            throw new Error("The parameter 'teacherId' must be defined.");
        url_ = url_.replace("{teacherId}", encodeURIComponent("" + teacherId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssignTeacher(_response);
        });
    }

    protected processAssignTeacher(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    removeTeacher(schoolYearId: string, classId: string, subjectId: string, teacherId: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/school-years/{schoolYearId}/classes/{classId}/subjects/{subjectId}/teachers/{teacherId}";
        if (schoolYearId === undefined || schoolYearId === null)
            throw new Error("The parameter 'schoolYearId' must be defined.");
        url_ = url_.replace("{schoolYearId}", encodeURIComponent("" + schoolYearId));
        if (classId === undefined || classId === null)
            throw new Error("The parameter 'classId' must be defined.");
        url_ = url_.replace("{classId}", encodeURIComponent("" + classId));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (teacherId === undefined || teacherId === null)
            throw new Error("The parameter 'teacherId' must be defined.");
        url_ = url_.replace("{teacherId}", encodeURIComponent("" + teacherId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemoveTeacher(_response);
        });
    }

    protected processRemoveTeacher(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class AbsenceStateSetCommand implements IAbsenceStateSetCommand {
    absenceState!: AbsenceState;

    constructor(data?: IAbsenceStateSetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.absenceState = _data["AbsenceState"];
        }
    }

    static fromJS(data: any): AbsenceStateSetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AbsenceStateSetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AbsenceState"] = this.absenceState;
        return data; 
    }
}

export interface IAbsenceStateSetCommand {
    absenceState: AbsenceState;
}

export enum AbsenceState {
    Unverified = "Unverified",
    Verified = "Verified",
}

export class PagedListResponseOfClassListResponse implements IPagedListResponseOfClassListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: ClassListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfClassListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(ClassListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfClassListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfClassListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfClassListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: ClassListResponse[] | undefined;
}

export class ClassListResponse implements IClassListResponse {
    id!: string;
    grade!: number;
    didFinish!: boolean;
    finishingSchoolYear!: SchoolYearListResponse | undefined;
    classType!: ClassTypeListResponse | undefined;

    constructor(data?: IClassListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.grade = _data["Grade"];
            this.didFinish = _data["DidFinish"];
            this.finishingSchoolYear = _data["FinishingSchoolYear"] ? SchoolYearListResponse.fromJS(_data["FinishingSchoolYear"]) : <any>undefined;
            this.classType = _data["ClassType"] ? ClassTypeListResponse.fromJS(_data["ClassType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClassListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClassListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Grade"] = this.grade;
        data["DidFinish"] = this.didFinish;
        data["FinishingSchoolYear"] = this.finishingSchoolYear ? this.finishingSchoolYear.toJSON() : <any>undefined;
        data["ClassType"] = this.classType ? this.classType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IClassListResponse {
    id: string;
    grade: number;
    didFinish: boolean;
    finishingSchoolYear: SchoolYearListResponse | undefined;
    classType: ClassTypeListResponse | undefined;
}

export class SchoolYearListResponse implements ISchoolYearListResponse {
    id!: string;
    displayName!: string | undefined;

    constructor(data?: ISchoolYearListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.displayName = _data["DisplayName"];
        }
    }

    static fromJS(data: any): SchoolYearListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SchoolYearListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["DisplayName"] = this.displayName;
        return data; 
    }
}

export interface ISchoolYearListResponse {
    id: string;
    displayName: string | undefined;
}

export class ClassTypeListResponse implements IClassTypeListResponse {
    id!: string;
    name!: string | undefined;

    constructor(data?: IClassTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): ClassTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClassTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data; 
    }
}

export interface IClassTypeListResponse {
    id: string;
    name: string | undefined;
}

export class ClassDetailsResponse implements IClassDetailsResponse {
    id!: string;
    grade!: number;
    didFinish!: boolean;
    classType!: ClassTypeListResponse | undefined;
    headTeacher!: UserRoleListResponse | undefined;
    startingSchoolYear!: SchoolYearListResponse | undefined;
    finishingSchoolYear!: SchoolYearListResponse | undefined;

    constructor(data?: IClassDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.grade = _data["Grade"];
            this.didFinish = _data["DidFinish"];
            this.classType = _data["ClassType"] ? ClassTypeListResponse.fromJS(_data["ClassType"]) : <any>undefined;
            this.headTeacher = _data["HeadTeacher"] ? UserRoleListResponse.fromJS(_data["HeadTeacher"]) : <any>undefined;
            this.startingSchoolYear = _data["StartingSchoolYear"] ? SchoolYearListResponse.fromJS(_data["StartingSchoolYear"]) : <any>undefined;
            this.finishingSchoolYear = _data["FinishingSchoolYear"] ? SchoolYearListResponse.fromJS(_data["FinishingSchoolYear"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClassDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClassDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Grade"] = this.grade;
        data["DidFinish"] = this.didFinish;
        data["ClassType"] = this.classType ? this.classType.toJSON() : <any>undefined;
        data["HeadTeacher"] = this.headTeacher ? this.headTeacher.toJSON() : <any>undefined;
        data["StartingSchoolYear"] = this.startingSchoolYear ? this.startingSchoolYear.toJSON() : <any>undefined;
        data["FinishingSchoolYear"] = this.finishingSchoolYear ? this.finishingSchoolYear.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IClassDetailsResponse {
    id: string;
    grade: number;
    didFinish: boolean;
    classType: ClassTypeListResponse | undefined;
    headTeacher: UserRoleListResponse | undefined;
    startingSchoolYear: SchoolYearListResponse | undefined;
    finishingSchoolYear: SchoolYearListResponse | undefined;
}

export class UserRoleListResponse implements IUserRoleListResponse {
    id!: string;
    name!: string | undefined;

    constructor(data?: IUserRoleListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): UserRoleListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data; 
    }
}

export interface IUserRoleListResponse {
    id: string;
    name: string | undefined;
}

export class ClassCreateCommand implements IClassCreateCommand {
    classTypeId!: string;
    headTeacherId!: string;
    startingSchoolYearId!: string;

    constructor(data?: IClassCreateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.classTypeId = _data["ClassTypeId"];
            this.headTeacherId = _data["HeadTeacherId"];
            this.startingSchoolYearId = _data["StartingSchoolYearId"];
        }
    }

    static fromJS(data: any): ClassCreateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ClassCreateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ClassTypeId"] = this.classTypeId;
        data["HeadTeacherId"] = this.headTeacherId;
        data["StartingSchoolYearId"] = this.startingSchoolYearId;
        return data; 
    }
}

export interface IClassCreateCommand {
    classTypeId: string;
    headTeacherId: string;
    startingSchoolYearId: string;
}

export class ClassEditCommand implements IClassEditCommand {
    headTeacherId!: string;

    constructor(data?: IClassEditCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.headTeacherId = _data["HeadTeacherId"];
        }
    }

    static fromJS(data: any): ClassEditCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ClassEditCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HeadTeacherId"] = this.headTeacherId;
        return data; 
    }
}

export interface IClassEditCommand {
    headTeacherId: string;
}

export class PagedListResponseOfClassroomListResponse implements IPagedListResponseOfClassroomListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: ClassroomListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfClassroomListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(ClassroomListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfClassroomListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfClassroomListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfClassroomListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: ClassroomListResponse[] | undefined;
}

export class ClassroomListResponse implements IClassroomListResponse {
    id!: string;
    name!: string | undefined;

    constructor(data?: IClassroomListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): ClassroomListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClassroomListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data; 
    }
}

export interface IClassroomListResponse {
    id: string;
    name: string | undefined;
}

export class ClassroomDetailsResponse implements IClassroomDetailsResponse {
    id!: string;
    name!: string | undefined;

    constructor(data?: IClassroomDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): ClassroomDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClassroomDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data; 
    }
}

export interface IClassroomDetailsResponse {
    id: string;
    name: string | undefined;
}

export class ClassroomCreateCommand implements IClassroomCreateCommand {
    name!: string | undefined;

    constructor(data?: IClassroomCreateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): ClassroomCreateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ClassroomCreateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        return data; 
    }
}

export interface IClassroomCreateCommand {
    name: string | undefined;
}

export class ClassroomEditCommand implements IClassroomEditCommand {
    name!: string | undefined;

    constructor(data?: IClassroomEditCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): ClassroomEditCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ClassroomEditCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        return data; 
    }
}

export interface IClassroomEditCommand {
    name: string | undefined;
}

export class PagedListResponseOfClassTypeListResponse implements IPagedListResponseOfClassTypeListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: ClassTypeListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfClassTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(ClassTypeListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfClassTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfClassTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfClassTypeListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: ClassTypeListResponse[] | undefined;
}

export class ClassTypeDetailsResponse implements IClassTypeDetailsResponse {
    id!: string;
    name!: string | undefined;
    description!: string | undefined;

    constructor(data?: IClassTypeDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): ClassTypeDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClassTypeDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IClassTypeDetailsResponse {
    id: string;
    name: string | undefined;
    description: string | undefined;
}

export class ClassTypeCreateCommand implements IClassTypeCreateCommand {
    name!: string | undefined;
    description!: string | undefined;
    startingGrade!: number;

    constructor(data?: IClassTypeCreateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.description = _data["Description"];
            this.startingGrade = _data["StartingGrade"];
        }
    }

    static fromJS(data: any): ClassTypeCreateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ClassTypeCreateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["Description"] = this.description;
        data["StartingGrade"] = this.startingGrade;
        return data; 
    }
}

export interface IClassTypeCreateCommand {
    name: string | undefined;
    description: string | undefined;
    startingGrade: number;
}

export class ClassTypeEditCommand implements IClassTypeEditCommand {
    name!: string | undefined;
    description!: string | undefined;
    startingGrade!: number;

    constructor(data?: IClassTypeEditCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.description = _data["Description"];
            this.startingGrade = _data["StartingGrade"];
        }
    }

    static fromJS(data: any): ClassTypeEditCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ClassTypeEditCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["Description"] = this.description;
        data["StartingGrade"] = this.startingGrade;
        return data; 
    }
}

export interface IClassTypeEditCommand {
    name: string | undefined;
    description: string | undefined;
    startingGrade: number;
}

export class GradeKindResponse implements IGradeKindResponse {
    id!: string;
    name!: string | undefined;
    averageMultiplier!: number;

    constructor(data?: IGradeKindResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.averageMultiplier = _data["AverageMultiplier"];
        }
    }

    static fromJS(data: any): GradeKindResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GradeKindResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["AverageMultiplier"] = this.averageMultiplier;
        return data; 
    }
}

export interface IGradeKindResponse {
    id: string;
    name: string | undefined;
    averageMultiplier: number;
}

export class GradeKindCreateCommand implements IGradeKindCreateCommand {
    name!: string | undefined;
    averageMultiplier!: number;

    constructor(data?: IGradeKindCreateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.averageMultiplier = _data["AverageMultiplier"];
        }
    }

    static fromJS(data: any): GradeKindCreateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GradeKindCreateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["AverageMultiplier"] = this.averageMultiplier;
        return data; 
    }
}

export interface IGradeKindCreateCommand {
    name: string | undefined;
    averageMultiplier: number;
}

export class GradeKindEditCommand implements IGradeKindEditCommand {
    name!: string | undefined;
    averageMultiplier!: number;

    constructor(data?: IGradeKindEditCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.averageMultiplier = _data["AverageMultiplier"];
        }
    }

    static fromJS(data: any): GradeKindEditCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GradeKindEditCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["AverageMultiplier"] = this.averageMultiplier;
        return data; 
    }
}

export interface IGradeKindEditCommand {
    name: string | undefined;
    averageMultiplier: number;
}

export class PagedListResponseOfMessageListResponse implements IPagedListResponseOfMessageListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: MessageListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfMessageListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(MessageListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfMessageListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfMessageListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfMessageListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: MessageListResponse[] | undefined;
}

export class MessageListResponse implements IMessageListResponse {
    id!: string;
    subject!: string | undefined;
    sentAt!: Date;
    sender!: UserRoleListResponse | undefined;

    constructor(data?: IMessageListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.subject = _data["Subject"];
            this.sentAt = _data["SentAt"] ? new Date(_data["SentAt"].toString()) : <any>undefined;
            this.sender = _data["Sender"] ? UserRoleListResponse.fromJS(_data["Sender"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MessageListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MessageListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Subject"] = this.subject;
        data["SentAt"] = this.sentAt ? this.sentAt.toISOString() : <any>undefined;
        data["Sender"] = this.sender ? this.sender.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMessageListResponse {
    id: string;
    subject: string | undefined;
    sentAt: Date;
    sender: UserRoleListResponse | undefined;
}

export class MessageDetailsResponse implements IMessageDetailsResponse {
    id!: string;
    subject!: string | undefined;
    text!: string | undefined;
    sentAt!: Date;
    sender!: UserRoleListResponse | undefined;
    recipients!: UserRoleListResponse[] | undefined;

    constructor(data?: IMessageDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.subject = _data["Subject"];
            this.text = _data["Text"];
            this.sentAt = _data["SentAt"] ? new Date(_data["SentAt"].toString()) : <any>undefined;
            this.sender = _data["Sender"] ? UserRoleListResponse.fromJS(_data["Sender"]) : <any>undefined;
            if (Array.isArray(_data["Recipients"])) {
                this.recipients = [] as any;
                for (let item of _data["Recipients"])
                    this.recipients!.push(UserRoleListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MessageDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MessageDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Subject"] = this.subject;
        data["Text"] = this.text;
        data["SentAt"] = this.sentAt ? this.sentAt.toISOString() : <any>undefined;
        data["Sender"] = this.sender ? this.sender.toJSON() : <any>undefined;
        if (Array.isArray(this.recipients)) {
            data["Recipients"] = [];
            for (let item of this.recipients)
                data["Recipients"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMessageDetailsResponse {
    id: string;
    subject: string | undefined;
    text: string | undefined;
    sentAt: Date;
    sender: UserRoleListResponse | undefined;
    recipients: UserRoleListResponse[] | undefined;
}

export class MessageSendCommand implements IMessageSendCommand {
    subject!: string | undefined;
    text!: string | undefined;
    recipientIds!: string[] | undefined;

    constructor(data?: IMessageSendCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subject = _data["Subject"];
            this.text = _data["Text"];
            if (Array.isArray(_data["RecipientIds"])) {
                this.recipientIds = [] as any;
                for (let item of _data["RecipientIds"])
                    this.recipientIds!.push(item);
            }
        }
    }

    static fromJS(data: any): MessageSendCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MessageSendCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Subject"] = this.subject;
        data["Text"] = this.text;
        if (Array.isArray(this.recipientIds)) {
            data["RecipientIds"] = [];
            for (let item of this.recipientIds)
                data["RecipientIds"].push(item);
        }
        return data; 
    }
}

export interface IMessageSendCommand {
    subject: string | undefined;
    text: string | undefined;
    recipientIds: string[] | undefined;
}

export class PagedListResponseOfSchoolYearListResponse implements IPagedListResponseOfSchoolYearListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: SchoolYearListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfSchoolYearListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(SchoolYearListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfSchoolYearListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfSchoolYearListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfSchoolYearListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: SchoolYearListResponse[] | undefined;
}

export class SchoolYearDetailsResponse implements ISchoolYearDetailsResponse {
    id!: string;
    displayName!: string | undefined;
    startsAt!: Date;
    endOfFirstHalf!: Date;
    endsAt!: Date;
    classes!: ClassListResponse[] | undefined;

    constructor(data?: ISchoolYearDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.displayName = _data["DisplayName"];
            this.startsAt = _data["StartsAt"] ? new Date(_data["StartsAt"].toString()) : <any>undefined;
            this.endOfFirstHalf = _data["EndOfFirstHalf"] ? new Date(_data["EndOfFirstHalf"].toString()) : <any>undefined;
            this.endsAt = _data["EndsAt"] ? new Date(_data["EndsAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["Classes"])) {
                this.classes = [] as any;
                for (let item of _data["Classes"])
                    this.classes!.push(ClassListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchoolYearDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SchoolYearDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["DisplayName"] = this.displayName;
        data["StartsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>undefined;
        data["EndOfFirstHalf"] = this.endOfFirstHalf ? this.endOfFirstHalf.toISOString() : <any>undefined;
        data["EndsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>undefined;
        if (Array.isArray(this.classes)) {
            data["Classes"] = [];
            for (let item of this.classes)
                data["Classes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISchoolYearDetailsResponse {
    id: string;
    displayName: string | undefined;
    startsAt: Date;
    endOfFirstHalf: Date;
    endsAt: Date;
    classes: ClassListResponse[] | undefined;
}

export class SchoolYearCreateCommand implements ISchoolYearCreateCommand {
    displayName!: string | undefined;
    startsAt!: Date;
    endOfFirstHalf!: Date;
    endsAt!: Date;

    constructor(data?: ISchoolYearCreateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["DisplayName"];
            this.startsAt = _data["StartsAt"] ? new Date(_data["StartsAt"].toString()) : <any>undefined;
            this.endOfFirstHalf = _data["EndOfFirstHalf"] ? new Date(_data["EndOfFirstHalf"].toString()) : <any>undefined;
            this.endsAt = _data["EndsAt"] ? new Date(_data["EndsAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SchoolYearCreateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SchoolYearCreateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DisplayName"] = this.displayName;
        data["StartsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>undefined;
        data["EndOfFirstHalf"] = this.endOfFirstHalf ? this.endOfFirstHalf.toISOString() : <any>undefined;
        data["EndsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISchoolYearCreateCommand {
    displayName: string | undefined;
    startsAt: Date;
    endOfFirstHalf: Date;
    endsAt: Date;
}

export class SchoolYearEditCommand implements ISchoolYearEditCommand {
    displayName!: string | undefined;
    startsAt!: Date;
    endOfFirstHalf!: Date;
    endsAt!: Date;

    constructor(data?: ISchoolYearEditCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["DisplayName"];
            this.startsAt = _data["StartsAt"] ? new Date(_data["StartsAt"].toString()) : <any>undefined;
            this.endOfFirstHalf = _data["EndOfFirstHalf"] ? new Date(_data["EndOfFirstHalf"].toString()) : <any>undefined;
            this.endsAt = _data["EndsAt"] ? new Date(_data["EndsAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SchoolYearEditCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SchoolYearEditCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DisplayName"] = this.displayName;
        data["StartsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>undefined;
        data["EndOfFirstHalf"] = this.endOfFirstHalf ? this.endOfFirstHalf.toISOString() : <any>undefined;
        data["EndsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISchoolYearEditCommand {
    displayName: string | undefined;
    startsAt: Date;
    endOfFirstHalf: Date;
    endsAt: Date;
}

export class PagedListResponseOfUserRoleListResponse implements IPagedListResponseOfUserRoleListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: UserRoleListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfUserRoleListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(UserRoleListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfUserRoleListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfUserRoleListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfUserRoleListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: UserRoleListResponse[] | undefined;
}

export class PagedListResponseOfAbsenceListResponse implements IPagedListResponseOfAbsenceListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: AbsenceListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfAbsenceListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(AbsenceListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfAbsenceListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfAbsenceListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfAbsenceListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: AbsenceListResponse[] | undefined;
}

export class AbsenceListResponse implements IAbsenceListResponse {
    id!: string;
    absenceState!: AbsenceState;
    lesson!: LessonListResponse | undefined;

    constructor(data?: IAbsenceListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.absenceState = _data["AbsenceState"];
            this.lesson = _data["Lesson"] ? LessonListResponse.fromJS(_data["Lesson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AbsenceListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AbsenceListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["AbsenceState"] = this.absenceState;
        data["Lesson"] = this.lesson ? this.lesson.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAbsenceListResponse {
    id: string;
    absenceState: AbsenceState;
    lesson: LessonListResponse | undefined;
}

export class LessonListResponse implements ILessonListResponse {
    id!: string;
    subject!: SubjectListResponse | undefined;
    classroom!: ClassroomListResponse | undefined;
    startsAt!: Date;
    endsAt!: Date;
    canceled!: boolean;

    constructor(data?: ILessonListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.subject = _data["Subject"] ? SubjectListResponse.fromJS(_data["Subject"]) : <any>undefined;
            this.classroom = _data["Classroom"] ? ClassroomListResponse.fromJS(_data["Classroom"]) : <any>undefined;
            this.startsAt = _data["StartsAt"] ? new Date(_data["StartsAt"].toString()) : <any>undefined;
            this.endsAt = _data["EndsAt"] ? new Date(_data["EndsAt"].toString()) : <any>undefined;
            this.canceled = _data["Canceled"];
        }
    }

    static fromJS(data: any): LessonListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LessonListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        data["Classroom"] = this.classroom ? this.classroom.toJSON() : <any>undefined;
        data["StartsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>undefined;
        data["EndsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>undefined;
        data["Canceled"] = this.canceled;
        return data; 
    }
}

export interface ILessonListResponse {
    id: string;
    subject: SubjectListResponse | undefined;
    classroom: ClassroomListResponse | undefined;
    startsAt: Date;
    endsAt: Date;
    canceled: boolean;
}

export class SubjectListResponse implements ISubjectListResponse {
    id!: string;
    name!: string | undefined;

    constructor(data?: ISubjectListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): SubjectListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SubjectListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        return data; 
    }
}

export interface ISubjectListResponse {
    id: string;
    name: string | undefined;
}

export class GradeListByStudentResponse implements IGradeListByStudentResponse {
    subject!: SubjectListResponse | undefined;
    grades!: GradeListResponse[] | undefined;

    constructor(data?: IGradeListByStudentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subject = _data["Subject"] ? SubjectListResponse.fromJS(_data["Subject"]) : <any>undefined;
            if (Array.isArray(_data["Grades"])) {
                this.grades = [] as any;
                for (let item of _data["Grades"])
                    this.grades!.push(GradeListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GradeListByStudentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GradeListByStudentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        if (Array.isArray(this.grades)) {
            data["Grades"] = [];
            for (let item of this.grades)
                data["Grades"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGradeListByStudentResponse {
    subject: SubjectListResponse | undefined;
    grades: GradeListResponse[] | undefined;
}

export class GradeListResponse implements IGradeListResponse {
    id!: string;
    value!: GradeValue;
    gradeKind!: GradeKindResponse | undefined;

    constructor(data?: IGradeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.value = _data["Value"];
            this.gradeKind = _data["GradeKind"] ? GradeKindResponse.fromJS(_data["GradeKind"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GradeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GradeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Value"] = this.value;
        data["GradeKind"] = this.gradeKind ? this.gradeKind.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGradeListResponse {
    id: string;
    value: GradeValue;
    gradeKind: GradeKindResponse | undefined;
}

export enum GradeValue {
    Fail = "Fail",
    Sufficient = "Sufficient",
    Fair = "Fair",
    Good = "Good",
    Excellent = "Excellent",
}

export class PagedListResponseOfSubjectListResponse implements IPagedListResponseOfSubjectListResponse {
    pageSize!: number;
    pageIndex!: number;
    totalCount!: number;
    items!: SubjectListResponse[] | undefined;

    constructor(data?: IPagedListResponseOfSubjectListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["PageSize"];
            this.pageIndex = _data["PageIndex"];
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(SubjectListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListResponseOfSubjectListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResponseOfSubjectListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PageSize"] = this.pageSize;
        data["PageIndex"] = this.pageIndex;
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedListResponseOfSubjectListResponse {
    pageSize: number;
    pageIndex: number;
    totalCount: number;
    items: SubjectListResponse[] | undefined;
}

export class SubjectDetailsResponse implements ISubjectDetailsResponse {
    id!: string;
    name!: string | undefined;
    teachers!: UserRoleListResponse[] | undefined;

    constructor(data?: ISubjectDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            if (Array.isArray(_data["Teachers"])) {
                this.teachers = [] as any;
                for (let item of _data["Teachers"])
                    this.teachers!.push(UserRoleListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubjectDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SubjectDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        if (Array.isArray(this.teachers)) {
            data["Teachers"] = [];
            for (let item of this.teachers)
                data["Teachers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISubjectDetailsResponse {
    id: string;
    name: string | undefined;
    teachers: UserRoleListResponse[] | undefined;
}

export class SubjectCreateCommand implements ISubjectCreateCommand {
    name!: string | undefined;

    constructor(data?: ISubjectCreateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): SubjectCreateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SubjectCreateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        return data; 
    }
}

export interface ISubjectCreateCommand {
    name: string | undefined;
}

export class SubjectEditCommand implements ISubjectEditCommand {
    name!: string | undefined;

    constructor(data?: ISubjectEditCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): SubjectEditCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SubjectEditCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        return data; 
    }
}

export interface ISubjectEditCommand {
    name: string | undefined;
}

export class GradeListByClassSchoolYearSubjectResponse implements IGradeListByClassSchoolYearSubjectResponse {
    student!: UserRoleListResponse | undefined;
    grades!: GradeListResponse[] | undefined;

    constructor(data?: IGradeListByClassSchoolYearSubjectResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.student = _data["Student"] ? UserRoleListResponse.fromJS(_data["Student"]) : <any>undefined;
            if (Array.isArray(_data["Grades"])) {
                this.grades = [] as any;
                for (let item of _data["Grades"])
                    this.grades!.push(GradeListResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GradeListByClassSchoolYearSubjectResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GradeListByClassSchoolYearSubjectResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Student"] = this.student ? this.student.toJSON() : <any>undefined;
        if (Array.isArray(this.grades)) {
            data["Grades"] = [];
            for (let item of this.grades)
                data["Grades"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGradeListByClassSchoolYearSubjectResponse {
    student: UserRoleListResponse | undefined;
    grades: GradeListResponse[] | undefined;
}

export class LessonDetailsResponse implements ILessonDetailsResponse {
    id!: string;
    canceled!: boolean;
    title!: string | undefined;
    description!: string | undefined;
    startsAt!: Date;
    endsAt!: Date;
    schoolYear!: SchoolYearListResponse | undefined;
    class!: ClassListResponse | undefined;
    subject!: SubjectListResponse | undefined;
    classroom!: ClassroomListResponse | undefined;

    constructor(data?: ILessonDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.canceled = _data["Canceled"];
            this.title = _data["Title"];
            this.description = _data["Description"];
            this.startsAt = _data["StartsAt"] ? new Date(_data["StartsAt"].toString()) : <any>undefined;
            this.endsAt = _data["EndsAt"] ? new Date(_data["EndsAt"].toString()) : <any>undefined;
            this.schoolYear = _data["SchoolYear"] ? SchoolYearListResponse.fromJS(_data["SchoolYear"]) : <any>undefined;
            this.class = _data["Class"] ? ClassListResponse.fromJS(_data["Class"]) : <any>undefined;
            this.subject = _data["Subject"] ? SubjectListResponse.fromJS(_data["Subject"]) : <any>undefined;
            this.classroom = _data["Classroom"] ? ClassroomListResponse.fromJS(_data["Classroom"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LessonDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LessonDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Canceled"] = this.canceled;
        data["Title"] = this.title;
        data["Description"] = this.description;
        data["StartsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>undefined;
        data["EndsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>undefined;
        data["SchoolYear"] = this.schoolYear ? this.schoolYear.toJSON() : <any>undefined;
        data["Class"] = this.class ? this.class.toJSON() : <any>undefined;
        data["Subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        data["Classroom"] = this.classroom ? this.classroom.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ILessonDetailsResponse {
    id: string;
    canceled: boolean;
    title: string | undefined;
    description: string | undefined;
    startsAt: Date;
    endsAt: Date;
    schoolYear: SchoolYearListResponse | undefined;
    class: ClassListResponse | undefined;
    subject: SubjectListResponse | undefined;
    classroom: ClassroomListResponse | undefined;
}

export class LessonCreateCommandBody implements ILessonCreateCommandBody {
    title!: string | undefined;
    description!: string | undefined;
    startsAt!: Date;
    endsAt!: Date;
    classroomId!: string;

    constructor(data?: ILessonCreateCommandBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["Title"];
            this.description = _data["Description"];
            this.startsAt = _data["StartsAt"] ? new Date(_data["StartsAt"].toString()) : <any>undefined;
            this.endsAt = _data["EndsAt"] ? new Date(_data["EndsAt"].toString()) : <any>undefined;
            this.classroomId = _data["ClassroomId"];
        }
    }

    static fromJS(data: any): LessonCreateCommandBody {
        data = typeof data === 'object' ? data : {};
        let result = new LessonCreateCommandBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Description"] = this.description;
        data["StartsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>undefined;
        data["EndsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>undefined;
        data["ClassroomId"] = this.classroomId;
        return data; 
    }
}

export interface ILessonCreateCommandBody {
    title: string | undefined;
    description: string | undefined;
    startsAt: Date;
    endsAt: Date;
    classroomId: string;
}

export class LessonEditCommand implements ILessonEditCommand {
    title!: string | undefined;
    description!: string | undefined;
    startsAt!: Date;
    endsAt!: Date;
    canceled!: boolean;

    constructor(data?: ILessonEditCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["Title"];
            this.description = _data["Description"];
            this.startsAt = _data["StartsAt"] ? new Date(_data["StartsAt"].toString()) : <any>undefined;
            this.endsAt = _data["EndsAt"] ? new Date(_data["EndsAt"].toString()) : <any>undefined;
            this.canceled = _data["Canceled"];
        }
    }

    static fromJS(data: any): LessonEditCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LessonEditCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Description"] = this.description;
        data["StartsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>undefined;
        data["EndsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>undefined;
        data["Canceled"] = this.canceled;
        return data; 
    }
}

export interface ILessonEditCommand {
    title: string | undefined;
    description: string | undefined;
    startsAt: Date;
    endsAt: Date;
    canceled: boolean;
}

export class LessonCancellationSetCommand implements ILessonCancellationSetCommand {
    canceled!: boolean;

    constructor(data?: ILessonCancellationSetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canceled = _data["Canceled"];
        }
    }

    static fromJS(data: any): LessonCancellationSetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LessonCancellationSetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Canceled"] = this.canceled;
        return data; 
    }
}

export interface ILessonCancellationSetCommand {
    canceled: boolean;
}

export class GradeDetailsResponse implements IGradeDetailsResponse {
    id!: string;
    gradeValue!: GradeValue;
    description!: string | undefined;
    gradeKind!: GradeKindResponse | undefined;
    student!: UserRoleListResponse | undefined;
    teacher!: UserRoleListResponse | undefined;
    subject!: SubjectListResponse | undefined;

    constructor(data?: IGradeDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.gradeValue = _data["GradeValue"];
            this.description = _data["Description"];
            this.gradeKind = _data["GradeKind"] ? GradeKindResponse.fromJS(_data["GradeKind"]) : <any>undefined;
            this.student = _data["Student"] ? UserRoleListResponse.fromJS(_data["Student"]) : <any>undefined;
            this.teacher = _data["Teacher"] ? UserRoleListResponse.fromJS(_data["Teacher"]) : <any>undefined;
            this.subject = _data["Subject"] ? SubjectListResponse.fromJS(_data["Subject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GradeDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GradeDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["GradeValue"] = this.gradeValue;
        data["Description"] = this.description;
        data["GradeKind"] = this.gradeKind ? this.gradeKind.toJSON() : <any>undefined;
        data["Student"] = this.student ? this.student.toJSON() : <any>undefined;
        data["Teacher"] = this.teacher ? this.teacher.toJSON() : <any>undefined;
        data["Subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGradeDetailsResponse {
    id: string;
    gradeValue: GradeValue;
    description: string | undefined;
    gradeKind: GradeKindResponse | undefined;
    student: UserRoleListResponse | undefined;
    teacher: UserRoleListResponse | undefined;
    subject: SubjectListResponse | undefined;
}

export class ClassSchoolYearSubjectGradeCreateDto implements IClassSchoolYearSubjectGradeCreateDto {
    value!: GradeValue;
    description!: string | undefined;
    gradeKindId!: string;

    constructor(data?: IClassSchoolYearSubjectGradeCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["Value"];
            this.description = _data["Description"];
            this.gradeKindId = _data["GradeKindId"];
        }
    }

    static fromJS(data: any): ClassSchoolYearSubjectGradeCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClassSchoolYearSubjectGradeCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Value"] = this.value;
        data["Description"] = this.description;
        data["GradeKindId"] = this.gradeKindId;
        return data; 
    }
}

export interface IClassSchoolYearSubjectGradeCreateDto {
    value: GradeValue;
    description: string | undefined;
    gradeKindId: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
